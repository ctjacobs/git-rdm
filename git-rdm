#!/usr/bin/env python

#!/usr/bin/env python

import os, os.path, sys
import argparse
import git
import logging
import sqlite3 as sqlite

_LOG = logging.getLogger(__name__)
_HANDLER = logging.StreamHandler()
_LOG.addHandler(_HANDLER)
_HANDLER.setFormatter(logging.Formatter('%(module)s %(levelname)s: %(message)s'))
del(_HANDLER)
_LOG.setLevel(logging.DEBUG)

try:
    import pyrdm
except ImportError:
    _LOG.exception("Could not import the PyRDM library necessary for research data management.")
    #sys.exit(1)

class RDM:
    
    def __init__(self):
    
        # Open the Git repository.
        try:
            self.repo = git.Repo(".")
        except git.InvalidGitRepositoryError:
            _LOG.exception("Not in a Git version controlled repository.")
            sys.exit(1)
        
        return
        
    def init(self):
        """ Initialise the RDM control directory and set up the SQL database of published files. """
        
        # Create the RDM control directory if it doesn't already exist.
        if not os.path.exists(".rdm"):
            os.makedirs(".rdm")
        
        # Set up the SQLite database.
        logging.debug("Attempting to connect to publication database...")
        path = self.repo.working_dir + "/.rdm/publications.db"
        try:
            self.connection = sqlite.connect(path)
            self.connection.row_factory = sqlite.Row
            logging.debug("Connected successfully!")
        except sqlite.Error as e:
            logging.exception(e)
        
        # Set up publication table columns.
        with self.connection:
            c = self.connection.cursor()
            query = "CREATE TABLE publication (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, description TEXT, doi TEXT)"
            c.execute(query)

        # Disconnect.
        if(self.connection):
            self.connection.close()
                
        return

    def status(self):
        print(self.repo.git.status())


if(__name__ == "__main__"):
    # Command line arguments
    parser = argparse.ArgumentParser(prog="git-rdm")
    parser.add_argument("subcommand", help="The subcommand to 'git rdm'.", action="store", type=str)
    parser.add_argument("-d", "--debug", action="store_true", default=False, help="Enable debugging.")
    args = parser.parse_args()

    # Output debugging messages to a file
    if(args.debug):
        # Get the root logger
        logger = logging.getLogger()
        logger.setLevel(logging.DEBUG)

    
    rdm = RDM()
    if args.subcommand == "init":
        rdm.init()
    elif args.subcommand == "status":
        rdm.status()
    else:
        _LOG.error("Unknown git-rdm subcommand '%s'" % args.subcommand)
        
